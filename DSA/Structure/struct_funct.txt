structure as a parameter : - 

structure passing  by value :

1) We can pass structure as value in to the function . When we pass the actual parameter as a value then formal parameter make a new space in a stack and return the value .


code snipet : - 

struct rectangle 
{
    int length ; 
    int breadth ; 
}
int area(struct rectangle r1 )
{
    int area = r1.length * r2.breadth ;
    return area ; 
}
int main ()
{
    struct rectangle r = { 10 , 5};
    printf("%d"  , area(r));
}

2) If we change the formal parameter then their is no change in actual parameters . 

eg :- r1.length = 10 , r1.breadth =4 (formal parameter)
     r.length = 10 , r.breadth = 5 (actual parameter )




structure call by refrence : -

1) We just pass the refrence to the function that called pass by refrence . Nothing change in  the code .

code snipet :- 

struct rectangle 
{
    int length ; 
    int breadth ; 
}
int area(struct rectangle &r1 )
{
    int area = r1.length * r2.breadth ;
    return area ; 
}
int main ()
{
    struct rectangle r = { 10 , 5};
    printf("%d"  , area(r));
}

2) In this if we change in formal parameters then the changes reflect on actual parameters 



In structure call by address :- 

code snipet :- 

struct rectangle{
    int length ; 
    int breadth ;
};
int change_length(struct rectangle *ptr , int l)
{
  ptr->length = l ;
}
int main ()
{
    struct rectangle r = { 10 , 5}
    change_length(&r , 20);

}

Note :- 
1) We cannot pass the array call by value so we pass it as a call by refrence 
2) If array is declared in a structure then we can access the array using call by value method . In that case if you pass the array as call by value then a new array is created in stack for that function .

code snipet :- 

struct test {
    int a[5];
    int n ;
}

void change (struct test array)
{
  array.a[0]=3 ;
  array.a[1]=5 ;
}
int main ()
{
    struct test nums  = {{2,6,7,4,3}, 5};
    change(nums) 
}